/*
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.fame.projects.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.fame.projects.ide.contentassist.antlr.internal.InternalProjectsLangParser;
import uk.ac.kcl.inf.fame.projects.services.ProjectsLangGrammarAccess;

public class ProjectsLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ProjectsLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ProjectsLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProjectAccess().getAlternatives_5(), "rule__Project__Alternatives_5");
			builder.put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_10(), "rule__Task__Group_10__0");
			builder.put(grammarAccess.getPersonAccess().getGroup(), "rule__Person__Group__0");
			builder.put(grammarAccess.getEffortAccess().getGroup(), "rule__Effort__Group__0");
			builder.put(grammarAccess.getProjectAccess().getTitleAssignment_1(), "rule__Project__TitleAssignment_1");
			builder.put(grammarAccess.getProjectAccess().getDescriptionAssignment_4(), "rule__Project__DescriptionAssignment_4");
			builder.put(grammarAccess.getProjectAccess().getTasksAssignment_5_0(), "rule__Project__TasksAssignment_5_0");
			builder.put(grammarAccess.getProjectAccess().getPeopleAssignment_5_1(), "rule__Project__PeopleAssignment_5_1");
			builder.put(grammarAccess.getTaskAccess().getTitleAssignment_1(), "rule__Task__TitleAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getStartAssignment_4(), "rule__Task__StartAssignment_4");
			builder.put(grammarAccess.getTaskAccess().getDurationAssignment_6(), "rule__Task__DurationAssignment_6");
			builder.put(grammarAccess.getTaskAccess().getEffortAssignment_9(), "rule__Task__EffortAssignment_9");
			builder.put(grammarAccess.getTaskAccess().getEffortAssignment_10_1(), "rule__Task__EffortAssignment_10_1");
			builder.put(grammarAccess.getPersonAccess().getNameAssignment_1(), "rule__Person__NameAssignment_1");
			builder.put(grammarAccess.getEffortAccess().getPersonAssignment_0(), "rule__Effort__PersonAssignment_0");
			builder.put(grammarAccess.getEffortAccess().getPercentageAssignment_3(), "rule__Effort__PercentageAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ProjectsLangGrammarAccess grammarAccess;

	@Override
	protected InternalProjectsLangParser createParser() {
		InternalProjectsLangParser result = new InternalProjectsLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ProjectsLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ProjectsLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
