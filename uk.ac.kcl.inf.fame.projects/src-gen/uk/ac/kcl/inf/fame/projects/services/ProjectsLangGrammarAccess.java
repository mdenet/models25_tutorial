/*
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.fame.projects.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ProjectsLangGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.fame.projects.ProjectsLang.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cDescribedKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cTasksAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cTasksTaskParserRuleCall_5_0_0 = (RuleCall)cTasksAssignment_5_0.eContents().get(0);
		private final Assignment cPeopleAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cPeoplePersonParserRuleCall_5_1_0 = (RuleCall)cPeopleAssignment_5_1.eContents().get(0);
		
		//Project:
		//    'project' title=STRING
		//    'described' 'as' description=STRING
		//    (tasks += Task | people += Person)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' title=STRING
		//'described' 'as' description=STRING
		//(tasks += Task | people += Person)*
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//'described'
		public Keyword getDescribedKeyword_2() { return cDescribedKeyword_2; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_4_0() { return cDescriptionSTRINGTerminalRuleCall_4_0; }
		
		//(tasks += Task | people += Person)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//tasks += Task
		public Assignment getTasksAssignment_5_0() { return cTasksAssignment_5_0; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_5_0_0() { return cTasksTaskParserRuleCall_5_0_0; }
		
		//people += Person
		public Assignment getPeopleAssignment_5_1() { return cPeopleAssignment_5_1; }
		
		//Person
		public RuleCall getPeoplePersonParserRuleCall_5_1_0() { return cPeoplePersonParserRuleCall_5_1_0; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.fame.projects.ProjectsLang.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTitleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_1_0 = (RuleCall)cTitleAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMonthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStartINTTerminalRuleCall_4_0 = (RuleCall)cStartAssignment_4.eContents().get(0);
		private final Keyword cForKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDurationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDurationINTTerminalRuleCall_6_0 = (RuleCall)cDurationAssignment_6.eContents().get(0);
		private final Keyword cMonthsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cInvolvesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEffortAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEffortEffortParserRuleCall_9_0 = (RuleCall)cEffortAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAndKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cEffortAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cEffortEffortParserRuleCall_10_1_0 = (RuleCall)cEffortAssignment_10_1.eContents().get(0);
		
		//Task:
		//    'task' title=STRING 'from' 'month' start=INT 'for' duration=INT 'months'
		//    'involves' effort+=Effort ('and' effort+=Effort)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'task' title=STRING 'from' 'month' start=INT 'for' duration=INT 'months'
		//'involves' effort+=Effort ('and' effort+=Effort)*
		public Group getGroup() { return cGroup; }
		
		//'task'
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_1() { return cTitleAssignment_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_1_0() { return cTitleSTRINGTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//'month'
		public Keyword getMonthKeyword_3() { return cMonthKeyword_3; }
		
		//start=INT
		public Assignment getStartAssignment_4() { return cStartAssignment_4; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_4_0() { return cStartINTTerminalRuleCall_4_0; }
		
		//'for'
		public Keyword getForKeyword_5() { return cForKeyword_5; }
		
		//duration=INT
		public Assignment getDurationAssignment_6() { return cDurationAssignment_6; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_6_0() { return cDurationINTTerminalRuleCall_6_0; }
		
		//'months'
		public Keyword getMonthsKeyword_7() { return cMonthsKeyword_7; }
		
		//'involves'
		public Keyword getInvolvesKeyword_8() { return cInvolvesKeyword_8; }
		
		//effort+=Effort
		public Assignment getEffortAssignment_9() { return cEffortAssignment_9; }
		
		//Effort
		public RuleCall getEffortEffortParserRuleCall_9_0() { return cEffortEffortParserRuleCall_9_0; }
		
		//('and' effort+=Effort)*
		public Group getGroup_10() { return cGroup_10; }
		
		//'and'
		public Keyword getAndKeyword_10_0() { return cAndKeyword_10_0; }
		
		//effort+=Effort
		public Assignment getEffortAssignment_10_1() { return cEffortAssignment_10_1; }
		
		//Effort
		public RuleCall getEffortEffortParserRuleCall_10_1_0() { return cEffortEffortParserRuleCall_10_1_0; }
	}
	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.fame.projects.ProjectsLang.Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPersonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Person:
		//    'person' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'person' name=ID
		public Group getGroup() { return cGroup; }
		
		//'person'
		public Keyword getPersonKeyword_0() { return cPersonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class EffortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.fame.projects.ProjectsLang.Effort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPersonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPersonPersonCrossReference_0_0 = (CrossReference)cPersonAssignment_0.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_0_0_1 = (RuleCall)cPersonPersonCrossReference_0_0.eContents().get(1);
		private final Keyword cWorksKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPercentageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPercentageINTTerminalRuleCall_3_0 = (RuleCall)cPercentageAssignment_3.eContents().get(0);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Effort:
		//    person=[Person] 'works' 'for' percentage=INT '%'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//person=[Person] 'works' 'for' percentage=INT '%'
		public Group getGroup() { return cGroup; }
		
		//person=[Person]
		public Assignment getPersonAssignment_0() { return cPersonAssignment_0; }
		
		//[Person]
		public CrossReference getPersonPersonCrossReference_0_0() { return cPersonPersonCrossReference_0_0; }
		
		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_0_0_1() { return cPersonPersonIDTerminalRuleCall_0_0_1; }
		
		//'works'
		public Keyword getWorksKeyword_1() { return cWorksKeyword_1; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//percentage=INT
		public Assignment getPercentageAssignment_3() { return cPercentageAssignment_3; }
		
		//INT
		public RuleCall getPercentageINTTerminalRuleCall_3_0() { return cPercentageINTTerminalRuleCall_3_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
	}
	
	
	private final ProjectElements pProject;
	private final TaskElements pTask;
	private final PersonElements pPerson;
	private final EffortElements pEffort;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProjectsLangGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProject = new ProjectElements();
		this.pTask = new TaskElements();
		this.pPerson = new PersonElements();
		this.pEffort = new EffortElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.fame.projects.ProjectsLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Project:
	//    'project' title=STRING
	//    'described' 'as' description=STRING
	//    (tasks += Task | people += Person)*
	//;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Task:
	//    'task' title=STRING 'from' 'month' start=INT 'for' duration=INT 'months'
	//    'involves' effort+=Effort ('and' effort+=Effort)*
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Person:
	//    'person' name=ID
	//;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}
	
	//Effort:
	//    person=[Person] 'works' 'for' percentage=INT '%'
	//;
	public EffortElements getEffortAccess() {
		return pEffort;
	}
	
	public ParserRule getEffortRule() {
		return getEffortAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
