/*
 * generated by Xtext 2.35.0
 */
package uk.ac.kcl.inf.fame.projects.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.fame.projects.projectsLang.Effort;
import uk.ac.kcl.inf.fame.projects.projectsLang.Person;
import uk.ac.kcl.inf.fame.projects.projectsLang.Project;
import uk.ac.kcl.inf.fame.projects.projectsLang.ProjectsLangPackage;
import uk.ac.kcl.inf.fame.projects.projectsLang.Task;
import uk.ac.kcl.inf.fame.projects.services.ProjectsLangGrammarAccess;

@SuppressWarnings("all")
public class ProjectsLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ProjectsLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ProjectsLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ProjectsLangPackage.EFFORT:
				sequence_Effort(context, (Effort) semanticObject); 
				return; 
			case ProjectsLangPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case ProjectsLangPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case ProjectsLangPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Effort returns Effort
	 *
	 * Constraint:
	 *     (person=[Person|ID] percentage=INT)
	 * </pre>
	 */
	protected void sequence_Effort(ISerializationContext context, Effort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectsLangPackage.Literals.EFFORT__PERSON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsLangPackage.Literals.EFFORT__PERSON));
			if (transientValues.isValueTransient(semanticObject, ProjectsLangPackage.Literals.EFFORT__PERCENTAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsLangPackage.Literals.EFFORT__PERCENTAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEffortAccess().getPersonPersonIDTerminalRuleCall_0_0_1(), semanticObject.eGet(ProjectsLangPackage.Literals.EFFORT__PERSON, false));
		feeder.accept(grammarAccess.getEffortAccess().getPercentageINTTerminalRuleCall_3_0(), semanticObject.getPercentage());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Person returns Person
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Person(ISerializationContext context, Person semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ProjectsLangPackage.Literals.PERSON__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ProjectsLangPackage.Literals.PERSON__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (title=STRING description=STRING (tasks+=Task | people+=Person)*)
	 * </pre>
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (title=STRING start=INT duration=INT effort+=Effort effort+=Effort*)
	 * </pre>
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
