/*
 * generated by Xtext 2.35.0
 */
grammar InternalProjectsLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.fame.projects.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.fame.projects.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.fame.projects.services.ProjectsLangGrammarAccess;

}

@parser::members {

 	private ProjectsLangGrammarAccess grammarAccess;

    public InternalProjectsLangParser(TokenStream input, ProjectsLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Project";
   	}

   	@Override
   	protected ProjectsLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	iv_ruleProject=ruleProject
	{ $current=$iv_ruleProject.current; }
	EOF;

// Rule Project
ruleProject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='project'
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectAccess().getProjectKeyword_0());
		}
		(
			(
				lv_title_1_0=RULE_STRING
				{
					newLeafNode(lv_title_1_0, grammarAccess.getProjectAccess().getTitleSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='described'
		{
			newLeafNode(otherlv_2, grammarAccess.getProjectAccess().getDescribedKeyword_2());
		}
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getProjectAccess().getAsKeyword_3());
		}
		(
			(
				lv_description_4_0=RULE_STRING
				{
					newLeafNode(lv_description_4_0, grammarAccess.getProjectAccess().getDescriptionSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectAccess().getTasksTaskParserRuleCall_5_0_0());
					}
					lv_tasks_5_0=ruleTask
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectRule());
						}
						add(
							$current,
							"tasks",
							lv_tasks_5_0,
							"uk.ac.kcl.inf.fame.projects.ProjectsLang.Task");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProjectAccess().getPeoplePersonParserRuleCall_5_1_0());
					}
					lv_people_6_0=rulePerson
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProjectRule());
						}
						add(
							$current,
							"people",
							lv_people_6_0,
							"uk.ac.kcl.inf.fame.projects.ProjectsLang.Person");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='task'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTaskKeyword_0());
		}
		(
			(
				lv_title_1_0=RULE_STRING
				{
					newLeafNode(lv_title_1_0, grammarAccess.getTaskAccess().getTitleSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"title",
						lv_title_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getFromKeyword_2());
		}
		otherlv_3='month'
		{
			newLeafNode(otherlv_3, grammarAccess.getTaskAccess().getMonthKeyword_3());
		}
		(
			(
				lv_start_4_0=RULE_INT
				{
					newLeafNode(lv_start_4_0, grammarAccess.getTaskAccess().getStartINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5='for'
		{
			newLeafNode(otherlv_5, grammarAccess.getTaskAccess().getForKeyword_5());
		}
		(
			(
				lv_duration_6_0=RULE_INT
				{
					newLeafNode(lv_duration_6_0, grammarAccess.getTaskAccess().getDurationINTTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"duration",
						lv_duration_6_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_7='months'
		{
			newLeafNode(otherlv_7, grammarAccess.getTaskAccess().getMonthsKeyword_7());
		}
		otherlv_8='involves'
		{
			newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getInvolvesKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getEffortEffortParserRuleCall_9_0());
				}
				lv_effort_9_0=ruleEffort
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					add(
						$current,
						"effort",
						lv_effort_9_0,
						"uk.ac.kcl.inf.fame.projects.ProjectsLang.Effort");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10='and'
			{
				newLeafNode(otherlv_10, grammarAccess.getTaskAccess().getAndKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getEffortEffortParserRuleCall_10_1_0());
					}
					lv_effort_11_0=ruleEffort
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						add(
							$current,
							"effort",
							lv_effort_11_0,
							"uk.ac.kcl.inf.fame.projects.ProjectsLang.Effort");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	iv_rulePerson=rulePerson
	{ $current=$iv_rulePerson.current; }
	EOF;

// Rule Person
rulePerson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='person'
		{
			newLeafNode(otherlv_0, grammarAccess.getPersonAccess().getPersonKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPersonRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleEffort
entryRuleEffort returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEffortRule()); }
	iv_ruleEffort=ruleEffort
	{ $current=$iv_ruleEffort.current; }
	EOF;

// Rule Effort
ruleEffort returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEffortRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getEffortAccess().getPersonPersonCrossReference_0_0());
				}
			)
		)
		otherlv_1='works'
		{
			newLeafNode(otherlv_1, grammarAccess.getEffortAccess().getWorksKeyword_1());
		}
		otherlv_2='for'
		{
			newLeafNode(otherlv_2, grammarAccess.getEffortAccess().getForKeyword_2());
		}
		(
			(
				lv_percentage_3_0=RULE_INT
				{
					newLeafNode(lv_percentage_3_0, grammarAccess.getEffortAccess().getPercentageINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEffortRule());
					}
					setWithLastConsumed(
						$current,
						"percentage",
						lv_percentage_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='%'
		{
			newLeafNode(otherlv_4, grammarAccess.getEffortAccess().getPercentSignKeyword_4());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
